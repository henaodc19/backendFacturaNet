package co.edu.uco.facturanet.api.controlador;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.microsoft.localforwarder.library.inputs.contracts.Request;

import co.edu.uco.facturanet.api.respuesta.RespuestaApi;
import co.edu.uco.facturanet.dto.DetalleFacturaDTO;
import co.edu.uco.facturanet.dto.FacturaDTO;
import co.edu.uco.facturanet.dto.ProductoDTO;
import co.edu.uco.facturanet.dto.TipoPagoDTO;
import co.edu.uco.facturanet.dto.UsuarioDTO;
import co.edu.uco.facturanet.negocio.fachada.IFacturaFachada;
import co.edu.uco.facturanet.transversal.excepcion.FacturaNetExcepcion;

@CrossOrigin(origins = "*", methods = {RequestMethod.GET,RequestMethod.POST})
@RestController
@RequestMapping("/api/factura")
public class FacturaControlador {

	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Autowired
	private IFacturaFachada facturaFachada;

	@GetMapping("/dummy")
	@ResponseBody
	public FacturaDTO crearDummy() {
		FacturaDTO factura = new FacturaDTO();

		UsuarioDTO cliente = new UsuarioDTO();
		cliente.setCodigo(6);
		factura.setCliente(cliente);

		UsuarioDTO empleado = new UsuarioDTO();
		empleado.setCodigo(7);
		factura.setEmpleado(empleado);

		TipoPagoDTO tipoPago = new TipoPagoDTO();
		tipoPago.setCodigo(5);
		factura.setTipoPago(tipoPago);

		List<DetalleFacturaDTO> listaProductos = new ArrayList<DetalleFacturaDTO>();

		DetalleFacturaDTO detalleUno = new DetalleFacturaDTO();
		detalleUno.setCantidad(99);

		ProductoDTO productoUno = new ProductoDTO();
		productoUno.setCodigo(5);
		detalleUno.setProducto(productoUno);

		listaProductos.add(detalleUno);

		DetalleFacturaDTO detalleDos = new DetalleFacturaDTO();
		detalleDos.setCantidad(56);

		ProductoDTO productoDos = new ProductoDTO();
		productoDos.setCodigo(13);
		detalleDos.setProducto(productoDos);

		listaProductos.add(detalleDos);

		DetalleFacturaDTO detalleTres = new DetalleFacturaDTO();
		detalleTres.setCantidad(8);

		ProductoDTO productoTres = new ProductoDTO();
		productoTres.setCodigo(9);
		detalleTres.setProducto(productoTres);

		listaProductos.add(detalleTres);

		factura.setListaProductos(listaProductos);

		return factura;
	}
	
	@GetMapping("/usuarios")
	public List<UsuarioDTO> recuperarUsuario(){
		String sql = "select * from FAC_USUARIO_TBL";
		return this.jdbcTemplate.query(sql, new RowMapper<UsuarioDTO>() {
			
	        public UsuarioDTO mapRow(ResultSet rs, int i) throws SQLException {
	            UsuarioDTO p = new UsuarioDTO();
	            p.setCodigo(rs.getInt("IN_CODIGO"));
	            p.setIdentificacion(rs.getString("NV_IDENTIFICACION"));
	            p.setNombre(rs.getString("NV_NOMBRE"));
	            p.setDireccion(rs.getString("NV_DIRECCION"));
	            p.setCorreoElectronico(rs.getString("NV_CORREO_ELECTRONICO"));
	            return p;
	        }
	    });
		
	}
	
	@GetMapping("/Productos")
	public List<ProductoDTO> recuperarProductos(){
		String sql = "select * from FAC_PRODUCTO_TBL";
		return this.jdbcTemplate.query(sql, new RowMapper<ProductoDTO>() {
			
	        public ProductoDTO mapRow(ResultSet rs, int i) throws SQLException {
	            ProductoDTO p = new ProductoDTO();
	            p.setCodigo(rs.getInt("IN_CODIGO"));
	            p.setNombre(rs.getString("NV_NOMBRE"));
	            p.setValor(rs.getDouble("NU_VALOR"));
	            return p;
	        }
	    });
		
	}

	@PostMapping(consumes = "application/json")
	public RespuestaApi<FacturaDTO> crear(@RequestBody FacturaDTO factura) {

		RespuestaApi<FacturaDTO> respuesta = new RespuestaApi<FacturaDTO>();

		try {
			facturaFachada.registrar(factura);

			List<String> mensajes = new ArrayList<String>();
			mensajes.add("Factura registrada exitosamente");

			respuesta.setMensaje(mensajes);
			respuesta.setDatos((new ArrayList<FacturaDTO>()));
			respuesta.getDatos().add(factura);
			respuesta.setEstado("EXITO");
		} catch (FacturaNetExcepcion excepcion) {
			List<String> mensajes = new ArrayList<String>();
			mensajes.add(excepcion.getMensaje());
			respuesta.setMensaje(mensajes);
			respuesta.setDatos((new ArrayList<FacturaDTO>()));
			respuesta.setEstado("ERROR");
		} catch (Exception excepcion) {
			List<String> mensajes = new ArrayList<String>();
			mensajes.add("Se ha presentado un problema no controlado tratando de registrar la nueva factura.");
			respuesta.setMensaje(mensajes);
			respuesta.setDatos((new ArrayList<FacturaDTO>()));
			respuesta.setEstado("ERROR");
		}

		return respuesta;
	}
}
